name: Regenerate Badges

on:
  schedule:
    - cron: '0 18 * * *' # daily at 18:00 UTC
  push:
    paths:
      - 'badges_config.json'
      - 'generate_badges.py'
      - 'icons/**'
  pull_request:
    paths:
      - 'badges_config.json'
      - 'generate_badges.py'
      - 'icons/**'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all badges'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate-badges:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Generate badges
      run: |
        python generate_badges.py --config badges_config.json --output badges/
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Files changed:"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No files changed"
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add badges/
        git commit -m "Regenerate badges [skip ci]" || exit 0
        git push

    - name: Create Pull Request Comment
      if: github.event_name == 'pull_request' && steps.verify-changed-files.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Badges have been regenerated')
          );
          
          const body = `Badges have been regenerated based on your changes to the configuration.
          
          **Changed files:**
          ${process.env.GITHUB_WORKSPACE}
          
          The badges directory has been updated with the latest changes.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }
